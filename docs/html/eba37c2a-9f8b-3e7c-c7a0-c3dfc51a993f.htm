<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>IndexVar&lt;T&gt; Structure</title><meta name="Title" content="IndexVar&lt;T&gt;" /><meta name="Help.Id" content="T:RanSharp.Maths.IndexVar`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="RanSharp.Maths" /><meta name="guid" content="eba37c2a-9f8b-3e7c-c7a0-c3dfc51a993f" /><meta name="Description" content="A variable with indices. Can be used in symbolic calculations, or as a dictionary key. For example: IndexVar&lt; int&gt; x = new(2); // Represents an indexed variable based on 2 values." /><meta name="tocFile" content="../toc/IDAC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/RanSharp.ico" /></div><div id="DocumentationTitle" class="level-item">RanSharp Help Doc</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Index<wbr />Var<span id="LST5EFB5DF2_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST5EFB5DF2_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Structure</h1><div class="summary">
            A variable with indices. Can be used in symbolic calculations, or as a dictionary key.<br />
            For example:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IndexVar&lt; int&gt; x = new(2); // Represents an indexed variable based on 2 <see cref="T:System.Int32" /> values.<br />
List&lt;int[]&gt; symbolicPoints = new() { x[0, 0], x[0, 1]}; // Represents a list of 2D points: x_00 and x_01<br />
Func&lt;int[], PointF&gt; valueMap = (indices) =&gt; {/*body*/}; // Represents a function that maps an indexed variable to its value.<br />
List&lt;PointF&gt; points = points.Select(valueMap).ToList(); // Evaluates the actual values of the points.<br /></code></pre></div></div>
            When the value map is a simple function, the <span class="selflink">IndexVar<span id="LST5EFB5DF2_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST5EFB5DF2_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span> can be used as a dictionary key:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Dictionary&lt;IndexVar&lt;int&gt;, PointF&gt; points = new() { { x[1, 2], new PointF(1, 2) }, { x[3, 4], new PointF(3, 4) }, { x[5, 6], new PointF(5, 6) } }; // Represents a list of 2D points.<br /></code></pre></div></div>
            When the value map is very complicated and performance is critical, the <span class="selflink">IndexVar<span id="LST5EFB5DF2_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST5EFB5DF2_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span> should be used instead of variable values, 
            because it avoids the expensive evaluation as much as possible. The value map only needs to be used once after all symbolic calculations has been done.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="f6fa4f31-9201-0fec-0b6b-bfa7b3029260.htm">RanSharp.Maths</a><br /><strong>Assembly:</strong> RanSharp (in RanSharp.dll) Version: 1.0.1<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> <span class="identifier">IndexVar</span>&lt;T&gt; : <span class="identifier">IEnumerable</span>&lt;T[]&gt;, 
	<span class="identifier">IEnumerable</span>
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">IndexVar<span id="LST5EFB5DF2_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST5EFB5DF2_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noopener noreferrer">IEnumerable</a><span id="LST5EFB5DF2_8" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span id="LST5EFB5DF2_9" data-languageSpecificText="cpp=array&lt;"></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LST5EFB5DF2_10" data-languageSpecificText="cpp=&gt;|vb=()|nu=[]"></span><span id="LST5EFB5DF2_11" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, <a href="https://learn.microsoft.com/dotnet/api/system.collections.ienumerable" target="_blank" rel="noopener noreferrer">IEnumerable</a></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd><p class="missing">[Missing &lt;typeparam name="T"/&gt; documentation for "T:RanSharp.Maths.IndexVar`1"]</p></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDBGASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="ba3eedc6-f2f0-9725-119f-b24528c898bf.htm">IndexVar<span id="LST5EFB5DF2_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST5EFB5DF2_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Initializes a new instance of the <span class="selflink">IndexVar<span id="LST5EFB5DF2_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST5EFB5DF2_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span> struct using the specified index length.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDIGASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="5624048e-ef35-3b39-6a65-b587ec61de7e.htm">Count</a></td><td>
            Gets the number of unique indices that has been stored.
            </td></tr><tr><td><a href="3786e0c6-74da-04d3-4e89-ed0f3a221dee.htm">Item</a></td><td>
            The read-only pseudo indexer. It is used as a readable short hand for referencing indexed variables. Do not use it as an actual indexer.
            <br />Correct usage:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">verticesList.Add(x[0]); // Adds the variable x0 to the list of vertices</code></pre></div></div>
            Incorrect usage:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">x[0] = 5; // Wrong attempt to assign a value to the variable x0</code></pre></div></div></td></tr><tr><td><a href="98ccd4bf-a747-0eb2-9ea3-6b353d6f4459.htm">Values</a></td><td>
            Gets the list of unique indices that has been stored.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDCGASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals#system-valuetype-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Indicates whether this instance and a specified object are equal.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="b0d20ba1-a195-1333-aa55-3cff8952451a.htm">GetEnumerator</a></td><td>
            Returns an enumerator that iterates through the collection.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode#system-valuetype-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Returns the hash code for this instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="e0638cca-e92d-9a83-5be7-6092b19b35b6.htm">Remove</a></td><td>
            Removes the specified index from the list of unique indices.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring#system-valuetype-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns the fully qualified type name of this instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAGASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="18bf8675-0c46-1487-cb5e-9e0eadecb1d3.htm">IndexLength</a></td><td>
            Gets the length of each index.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="f6fa4f31-9201-0fec-0b6b-bfa7b3029260.htm">RanSharp.Maths Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>